;
;  Test programme for advanced text mode.
;  This test concentrates on 16-bit text mode and displays proportional font text.
;

; Include C64 BASIC program load header

	 .word $0801
	 .org $0801

	 .scope
	 .word _next, 10                       ; Next line and current line number
	 .byte $97, "2,0:", $9e, " 2014", $AA, "65",0      ; POKE 2,0 : SYS 2014+65
_next:	 .word 0

iter1:	 .byte 0

	 .checkpc 2079
	 .advance 2079

programentrypoint:
	lda #$00
	sta screen_ram_pointer
	sta screen_ram_pointer+1

	; no BASIC, so that we can see the font below
	lda #$36
	sta $01

	; Enable C65GS IO
	lda #$47
	sta $d02f
	lda #$53
	sta $d02f

	; Select 960x600 resolution
	lda #$40
	sta $d042
	lda #$01
	sta $d043

	; Enable 16-bit text mode, with full-colour characters, fast CPU
	lda #$47
	sta $d054

	; Make virtual row length $FF bytes
	lda #$ff
	sta $d040
	lda #$00
	sta $d041

	; Put screen RAM at screen_ram
	lda #<screen_ram
	sta $D060
	lda #>screen_ram
	sta $D061
	lda #$00
	sta $D062
	sta $D063
	; colour RAM starting at $0000
	sta $D064
	sta $D065

	; Set palette to grey gradient
	ldx #$00
pl:	txa
	lsr
	lsr
	lsr
	lsr
	and #$0f
	sta $d100,x
	sta $d200,x
	sta $d300,x
	inx
	bne pl

	; set border colour so that we can see how much raster time it takes
	lda #$ff
	sta $d020

	; set screen colour to black to help with contrast
	lda #$00
	sta $d021
	
	; calculate base tile number for this face
	jsr face_calculate_tile_base

	; Clear current text line output status
	jsr screen_line_clear

	; Print a short Unicode encoded message using the proportional font we
	; have loaded
	lda #<unicodestring
	ldx #>unicodestring
	jsr printunicodemessage	

	; then do nothing
	lda #$00
	sta $d020
loop:
	lda $d012
	cmp #$80
	bne loop
	jmp programentrypoint
	
; Text to display expressed as list of 16-bit unicode points.
unicodestring:
       .word 'H,'e,'l,'l,'o,$20,'W,'o,'r,'l,'d
       .word $000d
       .word $05d4,$05d3,$05d2,$05d1,$05d0
       .word $000d
       .word 'g,'a,'r,'y,$20,'j,'u,'p,'i,'t,'e,'r
       .word $000d       
       .word 0


printunicodemessage:
	; Display a unicode string using the proportional font loaded at
	; fontheader.
	
	; save pointer to message
	sta $fd
	stx $fe

pum_nextpoint:
	; read next glyph number
	ldy #$00
	lda ($fd),y
	sta glyph_unicode_point  ; @$0B51-2
	iny
	lda ($fd),y
	sta glyph_unicode_point+1
	; advance message pointer
	inw $fd
	inw $fd

	; return if we have hit null character ($0000)
	; as this marks end of string
	ora glyph_unicode_point
	bne pum1
	rts
pum1:
	; non-zero point
	jsr glyph_print     ; @$09D8
	jmp pum_nextpoint

face_calculate_tile_base:
	; work out the base tile number for this font
	lda fontheader+$84
	clc
	adc #<fontheader
	sta face_tile_base
	lda fontheader+$85
	adc #>fontheader
	sta face_tile_base+1
	lda fontheader+$86
	adc #$00
	sta face_tile_base+2
	; shift right six times to divide by $40
	ldx #$06
gl_2:	lsr face_tile_base+2
	ror face_tile_base+1
	ror face_tile_base      ; @$B5E
	dex
	bne gl_2
	rts	

; @$08F0
glyph_lookup:

	lda #$7f
	sta $d020

	; Get important information for a glyph from a font.
	
	; Start by building pointer to glyph list in font.
	; glyph list is always at header+$100
	lda #<$0100
	clc
	adc #<fontheader
	sta $57
	lda #>$0100
	adc #>fontheader
	sta $58
	; also get the number of glyphs so that we know when to stop looking
	lda fontheader+$80
	sta font_glyphs
	lda fontheader+$81
	sta font_glyphs+1
	
	; start looking at entry 0
	lda #$00
	sta temp_word
	sta temp_word+1

gl_tryglyph:
	ldy #$00
	lda ($57),y
	cmp glyph_unicode_point
	bne gl_notthisglyph
	iny
	lda ($57),y
	cmp glyph_unicode_point+1
	beq gl_foundglyph
gl_notthisglyph:
	; advance address by 5 bytes to next glyph entry 
	lda $57
	clc
	adc #$05
	sta $57
	lda $58
	adc #$00
	sta $58

	; decrement number of glyphs left to check
	lda font_glyphs
	sec
	sbc #$01
	sta font_glyphs
	lda font_glyphs+1
	sbc #$00
	sta font_glyphs+1

	; see if there are more glyphs to consider
	lda font_glyphs
	ora font_glyphs+1
	bne gl_tryglyph
gl_nomoreglyphs:
	ldz #$00
	; FAIL no such point in font
	lda #$00
	sta glyph_tiles_high
	sta glyph_tiles_wide
	sta glyph_horizontal_trim
	sta glyph_width
	sta glyph_width+1
	sta glyph_tile_list_address

	lda #$ff
	sta $d020

	rts
; @$0961
gl_foundglyph:
	; We have found the glyph entry in the font.

	; Save address of glyph entry in font
	lda $57
	sta glyph_entry_address
	lda $58
	sta glyph_entry_address+1
	lda #$00
	sta glyph_entry_address+2
	sta glyph_entry_address+3

	; Get the address of the tile map for this glyph
	ldy #$02
	lda ($57),y
	sta glyph_tile_list_address
	iny
	lda ($57),y
	sta glyph_tile_list_address+1

	; now get pointer to tile list
	lda glyph_tile_list_address
	clc
	adc fontheader+$82
	sta $57
	lda glyph_tile_list_address+1
	adc fontheader+$83
	sta $58
	lda $57
	clc
	adc #<fontheader
	sta $57
	lda $58
	adc #>fontheader
	sta $58

	; Get size information from tile list
	ldy #$00
	lda ($57),y
	sta glyph_tiles_high
	iny
	lda ($57),y
	sta glyph_tiles_underhang
	iny
	lda ($57),y
	sta glyph_tiles_wide
	iny
	lda ($57),y
	sta glyph_horizontal_trim
	ldz #$00

	; Now put final tile list address in place
	lda $57
	clc
	adc #$04
	sta glyph_tile_list_address
	lda $58
	adc #$00
	sta glyph_tile_list_address+1

	; Finally work out the width of the this glyph in pixels
       lda glyph_tiles_wide
       asl
       asl
       asl
       sta glyph_width
       lda glyph_tiles_wide
       lsr
       lsr
       lsr
       lsr
       lsr
       sta glyph_width+1
       lda glyph_width
       sec
       sbc glyph_horizontal_trim
       sta glyph_width
       lda glyph_width+1
       sbc #$00
       sta glyph_width+1

	lda #$ff
	sta $d020

       rts

; Print the currently looked-up Unicode glyph onto the current line of output.

glyph_print:
	lda glyph_unicode_point
	cmp #$0d
	bne gp1
	lda glyph_unicode_point+1
	cmp #$00
	bne gp1
	
	; Found carriage return
	jmp unicode_newline
gp1:
	; XXX Add other non-printable glyphs (eg colour changes) here

	; Printable glyph

	; Get details about glyph
	jsr glyph_lookup   ; @$08F0

	; work out how wide the line would be with this glyph added
	lda glyph_width
	clc
	adc screen_line_pixels
	sta temp_word
	lda glyph_width+1
	adc screen_line_pixels+1
	cmp screen_line_pixels_width+1
	bcc glyph_fits
	beq glyph_might_fit
glyph_doesnt_fit:
	; start a new line if the glyph won't fit on the current line
	jsr unicode_newline
	bra glyph_fits
glyph_might_fit:
	lda temp_word
	cmp screen_line_pixels_width
	bcs glyph_doesnt_fit
glyph_fits:
	; Glyph fits, so stamp it
glyph_stamp:
	; Draw a glyph into the screen & colour RAM buffers

	; The screen line is screen_line_height tiles high.
	; screen_line_underhang_height of those tiles are below the baseline.
	; So the highest numbered row is:
	;   screen_line_height-1-screen_line_underhang_height

	; The glyph is glyph_tiles_high+glyph_tiles_underhang tiles high.
	; glyph_tiles_underhang are below the baseline.
	; So the highest numbered row is:
	;   glyph_tiles_high-1

	; We go through the motions of stamping each of the 16 character rows.
	; If there is no character data for the current row, then we stamp blank
	; tiles, and do the kerning adjustments, so that these rows stay in
	; alignment with the rows that get stamped with glyph data

	; Start stamping from row 0
	lda #00
	sta $58

	; Glyphs are described by glyph_tiles_high and glyph_tiles_underhang.
	; Thus the first row to stamp is:
	; screen_line_height-screen_line_underhang_height
	; -glyph_tiles_high+glyph_tiles_underhang+1
	lda screen_line_height
	sec
	sbc screen_line_underhang_height
	sec
	sbc glyph_tiles_high
;	clc
;	adc glyph_tiles_underhang
	sta $57
	; the last row to stamp is the above + glyph_tiles_high - 1
	clc
	adc glyph_tiles_high
	clc
	adc glyph_tiles_underhang
	sec
	sbc #$01
	sta $5f

	; get pointer to tile list
	lda glyph_tile_list_address
	sta $59
	lda glyph_tile_list_address+1
	sta $5a

	; Offset in tile list (not incremented when drawing dummy rows)
	ldy #$00

	; and to colour RAM buffer
	lda #<colour_ram_buffer
	sta $5d
	lda #>colour_ram_buffer
	sta $5e

glyph_stamp_consider_row:
	; have we stamped all rows of this glyph?
	lda $58
	cmp screen_line_height
	beq stamping_done

	; get pointer to correct line of screen buffer in $5b/$5c
	lda #<screen_ram_buffer
	sta $5b
	lda #>screen_ram_buffer
	clc
	adc $58
	sta $5c
	ldz screen_line_bytes

	lda #$dd
	ldx $58
	sta $0440,x

	; does the current glyph correspond to a row in the screen line buffer?
	lda $58
	cmp $57
	bcc glyph_stamp_dummy_row
	lda $5f
	cmp $58
	bcc glyph_stamp_dummy_row
			
	; we need to stamp this row 

	lda #$55
	sta $0440,x


glyph_stamp_tile:
	; Now for each column of the row, stamp the appropriate tile

	; Mark this screen line as being used, so that it gets output.
	ldx $58
	lda #$99
	sta screen_line_char_row_used,x

	ldx #$00

glyph_stamp_tile_card:
	cpx glyph_tiles_wide
	beq glyph_stamp_done_row

	; stamp column of glyph
	lda ($59),y
	clc
	adc face_tile_base
	php
	sta ($5b),z
	lda glyph_colour
	sta ($5d),z
	iny
	inz
	lda ($59),y
	plp
	adc face_tile_base+1
	sta ($5b),z
	lda #$00
	sta ($5d),z
	iny
	inz
	
	inx
	bra glyph_stamp_tile_card

glyph_stamp_dummy_row:
	; Stamp a row with blank tiles
	ldx #$00
glyph_stamp_dummy_card:
	cpx glyph_tiles_wide
	beq glyph_stamp_done_row
	lda #<blank_tile_number
	sta ($5b),z
	lda #$00
	sta ($5d),z
	inz
	lda #>blank_tile_number
	sta ($5b),z
	lda #$00
	sta ($5d),z
	inz
	inx
	bra glyph_stamp_dummy_card

	; fall through

glyph_stamp_done_row:
	inc $58

	; apply horizontal trim to last tile drawn
	; (upper 3 bits of upper byte of screen RAM):
	lda glyph_horizontal_trim
	asl
	asl
	asl
	asl
	asl
	and #$e0
	sta temp
	dez
	lda ($5b),z
	ora temp
	sta ($5b),z

	bra glyph_stamp_consider_row

stamping_done:
	ldz #$00
	
	; Adjust bytes and pixels consumed

	; Each tile is two bytes wide
	lda glyph_tiles_wide
        asl
	clc
	adc screen_line_bytes
	sta screen_line_bytes

	; Pixels are represented naturally.
	lda screen_line_pixels
	clc
	adc glyph_width
	sta screen_line_pixels
	lda screen_line_pixels+1
	adc glyph_width+1
	sta screen_line_pixels+1

	rts

unicode_newline:
	; Clear unicode line status

	; Render the current line
	; (this will add the $FFFF EOL marker)
	jsr unicode_apply_line

	; Advance the screen RAM pointer to take account of the line
	lda screen_ram_applied_pointer
	sta screen_ram_pointer
	lda screen_ram_applied_pointer+1
	sta screen_ram_pointer+1

unl1:
	jsr screen_line_clear
	rts

screen_line_clear:
	; Reset line drawing aparartus for the start of the current line

	; reset horizontal position
	lda #$00
	sta screen_line_pixels
	sta screen_line_pixels+1
	sta screen_line_bytes
	; clear line used flags
	ldx #$0f
slc1:	sta screen_line_char_row_used,x
	dex
	bpl slc1	
	rts

unicode_apply_line:
	; Take the contents of the screen RAM buffer and colour RAM buffer and
	; apply (draw) it onto the screen

	; get pointer to colour RAM buffer
	lda #<colour_ram_buffer
	sta $57
	lda #>colour_ram_buffer
	sta $58

	; Set applied pointer to current screen pointer
	lda screen_ram_pointer
	sta screen_ram_applied_pointer
	lda screen_ram_pointer+1
	sta screen_ram_applied_pointer+1

	ldy #$00
ual_row:
	; Skip this row if there was nothing drawn in it.
	lda screen_line_char_row_used,y
	sta $0400,y
	beq ual_next_row

	; For this screen row, get the address of the screen ram buffer
	lda #<screen_ram_buffer
	sta $59
	tya
	clc
	adc #>screen_ram_buffer
	sta $5a

	; and also of the screen RAM where we need to write
	lda screen_ram_base
	clc
	adc screen_ram_applied_pointer
	sta $5b
	lda screen_ram_base+1
	adc screen_ram_applied_pointer+1
	sta $5c
	
	; and also the colour RAM where we need to write
	; XXX - this only works for first KB of colour RAM - should use DMA
	; to write colour RAM (and in fact to apply all the data)
	lda #<$D800
	clc
	adc screen_ram_applied_pointer
	sta $5d
	lda #>$D800
	adc screen_ram_applied_pointer+1
	sta $5e

	; copy bytes
	ldz #$00
ual_1:	lda ($59),z
	sta ($5b),z
	lda ($57),z
	sta ($5d),z    ; XXX only works for first 1KB of colour RAM - should use DMA
	inz
	cpz screen_line_bytes
	bne ual_1
	; now append $FFFF to screen RAM and dummy bytes to colour RAM
	lda #$FF
	sta ($5B),z
	sta ($5D),z
	inz
	sta ($5B),z
	sta ($5D),z
	inz

	; advance screen RAM pointer
	tza
	clc
	adc screen_ram_applied_pointer
	sta screen_ram_applied_pointer
	lda screen_ram_applied_pointer+1
	adc #$00
	sta screen_ram_applied_pointer+1

ual_next_row:
	; clear Z so we don't upset and 6502 code
	ldz #$00

	; check for next row
	iny
	cpy screen_line_height
	bne ual_row

	rts

blank_tile:
	.checkpc $25c0
	.advance $25c0

	.alias blank_tile_number $97

	.byte 0,0,0,0,0,0,0,0
	.byte 0,0,0,0,0,0,0,0
	.byte 0,0,0,0,0,0,0,0
	.byte 0,0,0,0,0,0,0,0
	.byte 0,0,0,0,0,0,0,0
	.byte 0,0,0,0,0,0,0,0
	.byte 0,0,0,0,0,0,0,0
	.byte 0,0,0,0,0,0,0,0


	.checkpc $2600
	.advance $2600

; scratch space
temp_word: .word 0
temp:	   .word 0

; number of unicode points in font
font_glyphs:
	.word 0

; Base number of glyph tiles
; Tiles are at fontheader+something, so base number is $4000/64 = $100
; this number gets added to the tile numbers extracted from the font
; to compute the VIC-IV tile number that points to the data.
; (3rd byte holds MSB of address prior to being shifted down)
face_tile_base:
	.word $0000,$0000

; @$260A
; current glyph being drawn
glyph_unicode_point:
	.word 0
glyph_tiles_high:
	.byte 0
glyph_tiles_underhang:
	.byte 0
glyph_tiles_wide:
	.byte 0
glyph_horizontal_trim:
	.byte 0
; @$2610
; width of glyph in pixels
glyph_width:
	.word 0
; @$2612
; address of glyph tile list
glyph_tile_list_address:
	.word $0000,$0000
; @$2616
glyph_entry_address:
	.word $0000,$0000

; @$261A
glyph_colour:
	.byte 1
; @$261B
; Where screen RAM starts
screen_ram_base:
	.word screen_ram
; @$261D
; Where we are relative to screen RAM for start of line
screen_ram_pointer:
	.word $0000
; @$261F
; Where we are relative to screen RAM after rendering the current line
screen_ram_applied_pointer:
	.word $0000
; @$2621
; width of screen lines in pixels
screen_line_pixels_width:
	.word 960
; @$2623
; number of pixels used on current line
screen_line_pixels:
	.word $0000
; number of bytes used to encode current screen line.
; when end of line is reached, this is used to eliminate the excess characters.
screen_line_bytes:
	.byte 0
; height of current line in 8x8 tiles (including underhang)
screen_line_height:
	.byte 16
; number of those 8x8 tiles that are for underhang
screen_line_underhang_height:
	.byte 4

screen_line_char_row_used:
; 16 one byte flags to indicate if a given character row is ever used
; in the current row of text output
	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

; buffer for screen lines.  256 bytes per line in the line buffer for screen RAM
; and colour RAM each limits lines to 128 8x8 tiles per line.  This seems a
; reasonable memory/max line length trade-off.  The trickier trade-off is the
; maximum number of tiles high that a row can be.  This will need to be reworked
; later, but for now, we will allow a line to be 8 tiles high. 8x256 = 2K.
; colour RAM only needs one row of buffer, since the colour information will be
; duplicated on each row of tiles.

	.checkpc $2700
	.advance $2700
colour_ram_buffer:
	.advance colour_ram_buffer+$100
screen_ram_buffer:
	.advance screen_ram_buffer+$1000
	
; Keep $3000 - $3FFF for screen RAM
	.checkpc $3800
	.advance $3800
screen_ram:
	; start by saying "Hello" manually until we fix it

	.word $FFFF
	.word $FFFF
	.word $FFFF
	.word $FFFF
	.word $FFFF

; 

; Include proportional font at $4000 (the file has 2 byte address header, so
; start at $3FFE
	.checkpc $3ffe
	.advance $3ffe
	.alias fontheader $4000

	.incbin "textmodetest-dejavus.f65"

	.scend

	.outfile "textmodetest.prg"
